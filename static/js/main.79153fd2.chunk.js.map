{"version":3,"sources":["Cell.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","evt","flipCellsAroundMe","classes","isLit","react_default","a","createElement","className","onClick","Component","defaultProps","Board","state","hasWon","board","createBoard","_this$props","nrows","ncols","chanceLightStartsOn","Array","from","el","Math","random","coord","_this$props2","_coord$split$map","split","map","Number","_coord$split$map2","slicedToArray","y","x","flipCell","checkWin","every","row","cell","setState","newBoard","_this2","i","key","col","index","concat","src_Cell_0","flipCellsAround","App","src_Board_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.79153fd2.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\nimport \"./Cell.css\"\r\n\r\n\r\n/** A single cell on the board.\r\n *\r\n * This has no state --- just two props:\r\n *\r\n * - flipCellsAroundMe: a function rec'd from the board which flips this\r\n *      cell and the cells around of it\r\n *\r\n * - isLit: boolean, is this cell lit?\r\n *\r\n * This handles clicks --- by calling flipCellsAroundMe\r\n *\r\n **/\r\n\r\nclass Cell extends Component {\r\n  static defaultProps = {\r\n    flipCellsAroundMe: null,\r\n    isLit: false\r\n  }\r\n  \r\n  constructor(props) {\r\n    super(props);\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  handleClick(evt) {\r\n    // call up to the board to flip cells around this cell\r\n    this.props.flipCellsAroundMe();\r\n  }\r\n\r\n  render() {\r\n    let classes = \"Cell\" + (this.props.isLit ? \" Cell-lit\" : \"\");\r\n\r\n    return (\r\n        <td className={classes} onClick={this.handleClick} />\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default Cell","import React, {Component} from \"react\";\r\nimport Cell from \"./Cell\";\r\nimport './Board.css';\r\n\r\n\r\n/** Game board of Lights out.\r\n *\r\n * Properties:\r\n *\r\n * - nrows: number of rows of board\r\n * - ncols: number of cols of board\r\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\r\n *\r\n * State:\r\n *\r\n * - hasWon: boolean, true when board is all off\r\n * - board: array-of-arrays of true/false\r\n *\r\n *    For this board:\r\n *       .  .  .\r\n *       O  O  .     (where . is off, and O is on)\r\n *       .  .  .\r\n *\r\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\r\n *\r\n *  This should render an HTML table of individual <Cell /> components.\r\n *\r\n *  This doesn't handle any clicks --- clicks are on individual cells\r\n *\r\n **/\r\n\r\nclass Board extends Component {\r\n  static defaultProps = {\r\n    nrows: 5,\r\n    ncols: 5,\r\n    chanceLightStartsOn: 0.05\r\n  }\r\n  \r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state =  {\r\n      hasWon: false,\r\n      board: this.createBoard()\r\n    }\r\n  }\r\n\r\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\r\n\r\n  createBoard() {\r\n    let board = [];\r\n    const { nrows, ncols, chanceLightStartsOn } = this.props;\r\n    board = Array.from(Array(nrows), () => {\r\n      return Array.from(Array(ncols), el => {\r\n        return el = Math.random() <= chanceLightStartsOn;\r\n      })\r\n    })\r\n   \r\n    return board;\r\n  }\r\n  \r\n\r\n  /** handle changing a cell: update board & determine if winner */\r\n\r\n  flipCellsAround(coord) {\r\n    let {ncols, nrows} = this.props;\r\n    let board = this.state.board;\r\n    let [y, x] = coord.split(\"-\").map(Number);\r\n\r\n    function flipCell(y, x) {\r\n      // if this coord is actually on board, flip it~!!!\r\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\r\n        board[y][x] = !board[y][x];\r\n      }\r\n    }\r\n    \r\n    // TODO: flip this cell and the cells around it\r\n    flipCell(y,x);\r\n    flipCell(y,x-1);\r\n    flipCell(y,x+1);\r\n    flipCell(y-1,x);\r\n    flipCell(y+1,x);\r\n\r\n\r\n    // win when every cell is turned off\r\n    // TODO: determine is the game has been won\r\n    let checkWin = board.every(row => row.every(cell => !cell))\r\n    this.setState({board:board, hasWon:checkWin});\r\n  }\r\n\r\n\r\n  /** Render game board or winning message. */\r\n\r\n  render() {\r\n\r\n    // if the game is won, just show a winning msg & render nothing else\r\n    let newBoard = [];\r\n    newBoard = Array.from(Array(this.props.nrows), (row,i) => {\r\n      return <tr key={i}>\r\n\r\n        {Array.from(Array(this.props.ncols), (col, index) => {\r\n          let coord = `${i}-${index}`;\r\n          return <Cell \r\n          key={coord} \r\n          isLit={this.state.board[i][index]}\r\n          flipCellsAroundMe={() => this.flipCellsAround(coord)}\r\n          />\r\n        })}\r\n      </tr>\r\n    })\r\n    \r\n    return (\r\n    <div className=\"Board\">\r\n    <h1 className=\"Board-heading\">Lights Out</h1>\r\n    <table className=\"Board-table\">\r\n      <tbody>\r\n      {newBoard}\r\n      </tbody>\r\n    </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default Board;\r\n","import React, { Component } from \"react\";\r\nimport Board from \"./Board\";\r\nimport \"./App.css\";\r\n\r\n/** Simple app that just shows the LightsOut game. */\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className='App'>\r\n        <Board />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}